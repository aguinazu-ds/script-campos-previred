name: Compilar Ejecutable Windows

on:
  push:
    tags: [ 'v*' ]  # Solo compilar cuando se crea un tag de versi√≥n
  workflow_dispatch:  # Permite ejecutar manualmente

# Permisos necesarios para crear releases
permissions:
  contents: write
  pull-requests: read

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Obtener versi√≥n del tag
      id: get_version
      shell: pwsh
      run: |
        if ($env:GITHUB_REF -match 'refs/tags/v(.*)') {
          $version = $Matches[1]
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "Tag version: $version"
        } else {
          # Para ejecuci√≥n manual, obtener versi√≥n del archivo
          $version = python version.py --show | Select-String "Versi√≥n:" | ForEach-Object { $_.ToString().Split(': ')[1] }
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "Manual run version: $version"
        }
      
    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        
    - name: Compilar con PyInstaller
      run: |
        pyinstaller `
          --onefile `
          --console `
          --name ProcesadorPrevired `
          --distpath . `
          --workpath build `
          --specpath build `
          procesar_archivos_windows.py
          
    - name: Verificar ejecutable
      run: |
        if (Test-Path "ProcesadorPrevired.exe") {
          Write-Host "‚úÖ Ejecutable creado exitosamente"
          $size = (Get-Item "ProcesadorPrevired.exe").Length
          Write-Host "üìä Tama√±o: $size bytes"
          
          # Mostrar informaci√≥n del ejecutable
          Write-Host "üìã Informaci√≥n del ejecutable:"
          Get-ItemProperty "ProcesadorPrevired.exe" | Select-Object Name, Length, LastWriteTime
        } else {
          Write-Host "‚ùå Error: Ejecutable no encontrado"
          Write-Host "üìÅ Contenido del directorio:"
          Get-ChildItem -Force
          exit 1
        }
        
    - name: Crear paquete de distribuci√≥n
      run: |
        # Crear carpeta de distribuci√≥n con versi√≥n din√°mica
        $folderName = "ProcesadorPrevired_v$env:VERSION"
        New-Item -ItemType Directory -Force -Path $folderName
        
        # Copiar ejecutable
        Copy-Item "ProcesadorPrevired.exe" "$folderName/"
        
        # Crear estructura de carpetas
        New-Item -ItemType Directory -Force -Path "$folderName/archivos105espacios"
        New-Item -ItemType Directory -Force -Path "$folderName/jornadas"
        
        # Copiar archivo de jornadas si existe
        if (Test-Path "jornadas/jornadasTrabajadores.csv") {
          Copy-Item "jornadas/jornadasTrabajadores.csv" "$folderName/jornadas/"
        }
        
        # Crear archivo de ejemplo simple
        "Coloque aqu√≠ sus archivos .txt o .TXT para procesar" | Out-File -FilePath "$folderName/archivos105espacios/COLOQUE_AQUI_SUS_ARCHIVOS.txt" -Encoding UTF8

    - name: Crear ZIP de distribuci√≥n
      run: |
        $folderName = "ProcesadorPrevired_v$env:VERSION"
        Compress-Archive -Path $folderName -DestinationPath "$folderName.zip"
        
    - name: Subir ejecutable como artefacto
      uses: actions/upload-artifact@v4
      with:
        name: ProcesadorPrevired-Windows-v${{ env.VERSION }}
        path: |
          ProcesadorPrevired.exe
          ProcesadorPrevired_v${{ env.VERSION }}.zip
        retention-days: 90
        
    - name: Crear release si es tag
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ProcesadorPrevired.exe
          ProcesadorPrevired_v${{ env.VERSION }}.zip
        tag_name: ${{ github.ref_name }}
        name: "Release v${{ env.VERSION }}"
        body: |
          ## üöÄ Procesador de Archivos Previred v${{ env.VERSION }}
          
          Ejecutable Windows del procesador de archivos Previred compilado autom√°ticamente.
          
          ### üì¶ Archivos incluidos:
          - `ProcesadorPrevired.exe` - Ejecutable standalone
          - `ProcesadorPrevired_v${{ env.VERSION }}.zip` - Paquete completo con carpetas e instrucciones
          
          ### ‚ú® Caracter√≠sticas:
          - ‚úÖ No requiere Python instalado
          - ‚úÖ Ejecutable nativo Windows
          - ‚úÖ Compilado con PyInstaller para m√°xima compatibilidad
          - ‚úÖ Procesamiento autom√°tico de archivos Previred
          - ‚úÖ Validaci√≥n estricta de RUTs
          - ‚úÖ Manejo de jornadas laborales
          - ‚úÖ Detecci√≥n autom√°tica de encoding
          - ‚úÖ Sistema de topes imponibles AFP
          - ‚úÖ Compatible con Windows 10/11
          
          ### üìã Uso:
          1. Descargue `ProcesadorPrevired_v${{ env.VERSION }}.zip`
          2. Extraiga en una carpeta
          3. Ejecute `ProcesadorPrevired.exe`
          4. Siga las instrucciones en pantalla
        token: ${{ secrets.GITHUB_TOKEN }}