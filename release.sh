#!/bin/bash
# -*- coding: utf-8 -*-
"""
Script de automatizaci√≥n para releases con versionado autom√°tico
"""

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar ayuda
show_help() {
    echo -e "${BLUE}üöÄ SISTEMA DE VERSIONADO AUTOM√ÅTICO${NC}"
    echo ""
    echo "Uso: $0 [TIPO] [MENSAJE]"
    echo ""
    echo "TIPOS de incremento:"
    echo "  patch   - Incrementa versi√≥n PATCH (1.2.0 ‚Üí 1.2.1) para bugs y peque√±os cambios"
    echo "  minor   - Incrementa versi√≥n MINOR (1.2.0 ‚Üí 1.3.0) para nuevas caracter√≠sticas"
    echo "  major   - Incrementa versi√≥n MAJOR (1.2.0 ‚Üí 2.0.0) para cambios importantes"
    echo ""
    echo "MENSAJE: Descripci√≥n del cambio (opcional)"
    echo ""
    echo "Ejemplos:"
    echo "  $0 patch \"Corregido error en c√°lculo de cotizaci√≥n\""
    echo "  $0 minor \"Agregado sistema de versionado autom√°tico\""
    echo "  $0 major \"Refactorizaci√≥n completa del sistema\""
    echo ""
    echo "El script autom√°ticamente:"
    echo "  ‚úÖ Incrementa la versi√≥n apropiada"
    echo "  ‚úÖ Actualiza los archivos con la nueva versi√≥n"
    echo "  ‚úÖ Hace commit con mensaje est√°ndar + emoji"
    echo "  ‚úÖ Crea tag de la versi√≥n"
    echo "  ‚úÖ Hace push con tags"
}

# Funci√≥n para obtener versi√≥n actual
get_current_version() {
    python3 version.py --show | grep "Versi√≥n:" | cut -d' ' -f2
}

# Funci√≥n para emojis seg√∫n tipo de cambio
get_emoji() {
    case $1 in
        "patch") echo "üîß" ;;
        "minor") echo "‚ú®" ;;
        "major") echo "üöÄ" ;;
        *) echo "üì¶" ;;
    esac
}

# Verificar argumentos
if [ $# -eq 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    show_help
    exit 0
fi

TIPO="$1"
MENSAJE="${2:-Actualizaci√≥n autom√°tica}"

# Verificar que el tipo sea v√°lido
if [[ ! "$TIPO" =~ ^(patch|minor|major)$ ]]; then
    echo -e "${RED}‚ùå Error: Tipo de versi√≥n inv√°lido. Debe ser patch, minor o major${NC}"
    show_help
    exit 1
fi

# Verificar que estemos en un repositorio git
if [ ! -d ".git" ]; then
    echo -e "${RED}‚ùå Error: No se encontr√≥ repositorio git en el directorio actual${NC}"
    exit 1
fi

# Verificar que no haya cambios pendientes
if [ -n "$(git status --porcelain)" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Hay cambios pendientes. Agreg√°ndolos autom√°ticamente...${NC}"
    git add .
fi

# Obtener versi√≥n actual
CURRENT_VERSION=$(get_current_version)
echo -e "${BLUE}üìã Versi√≥n actual: $CURRENT_VERSION${NC}"

# Incrementar versi√≥n
echo -e "${BLUE}üîÑ Incrementando versi√≥n $TIPO...${NC}"
python3 version.py --$TIPO

# Obtener nueva versi√≥n
NEW_VERSION=$(get_current_version)
echo -e "${GREEN}‚úÖ Nueva versi√≥n: $NEW_VERSION${NC}"

# Obtener emoji para el commit
EMOJI=$(get_emoji $TIPO)

# Crear mensaje de commit
COMMIT_MESSAGE="$EMOJI v$NEW_VERSION: $MENSAJE"

# Hacer commit
echo -e "${BLUE}üíæ Haciendo commit...${NC}"
git add .
git commit -m "$COMMIT_MESSAGE"

# Crear tag
echo -e "${BLUE}üè∑Ô∏è Creando tag v$NEW_VERSION...${NC}"
git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION: $MENSAJE"

# Push con tags
echo -e "${BLUE}üöÄ Subiendo cambios y tags a repositorio...${NC}"
git push origin main
git push origin --tags

echo ""
echo -e "${GREEN}üéâ ¬°Release completado exitosamente!${NC}"
echo -e "${GREEN}   Versi√≥n: $CURRENT_VERSION ‚Üí $NEW_VERSION${NC}"
echo -e "${GREEN}   Tag: v$NEW_VERSION${NC}"
echo -e "${GREEN}   Commit: $COMMIT_MESSAGE${NC}"
echo ""
echo -e "${BLUE}üîó Para ver el release en GitHub:${NC}"
echo -e "   https://github.com/aguinazu-ds/script-campos-previred/releases/tag/v$NEW_VERSION"
