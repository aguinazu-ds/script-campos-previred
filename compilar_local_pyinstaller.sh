#!/bin/bash

# Script para compilar con PyInstaller localmente (para testing)
# Genera ejecutable Linux para pruebas

echo "========================================="
echo "  COMPILACI√ìN LOCAL CON PYINSTALLER"
echo "========================================="
echo

# Verificar Python
if ! command -v python3 &> /dev/null; then
    echo "‚ùå ERROR: Python 3 no encontrado"
    echo "Instale Python 3: sudo apt-get install python3 python3-venv"
    exit 1
fi

echo "‚úÖ Python encontrado:"
python3 --version
echo

# Crear ambiente virtual si no existe
if [ ! -d ".venv" ]; then
    echo "ÔøΩ Creando ambiente virtual..."
    python3 -m venv .venv
fi

# Activar ambiente virtual
echo "üîå Activando ambiente virtual..."
source .venv/bin/activate

# Verificar que estamos en el ambiente virtual
if [[ "$VIRTUAL_ENV" != "" ]]; then
    echo "‚úÖ Ambiente virtual activo: $VIRTUAL_ENV"
else
    echo "‚ùå ERROR: No se pudo activar el ambiente virtual"
    exit 1
fi

# Actualizar pip
echo "üì¶ Actualizando pip..."
pip install --upgrade pip

# Instalar PyInstaller si no est√° instalado
if ! pip show pyinstaller &> /dev/null; then
    echo "üì¶ Instalando PyInstaller..."
    pip install pyinstaller
else
    echo "‚úÖ PyInstaller ya est√° instalado"
fi

# Verificar PyInstaller
echo "ÔøΩ Verificando PyInstaller..."
pyinstaller --version

echo

# Limpiar compilaciones anteriores
echo "üßπ Limpiando compilaciones anteriores..."
rm -rf build/ dist/ *.spec
rm -f ProcesadorPrevired

echo

# Verificar archivos necesarios
if [ ! -f "procesar_archivos_windows.py" ]; then
    echo "‚ùå ERROR: No se encuentra procesar_archivos_windows.py"
    exit 1
fi

echo "‚úÖ Archivo fuente encontrado: procesar_archivos_windows.py"
echo

echo "========================================="
echo "   INICIANDO COMPILACI√ìN..."
echo "========================================="
echo

# Opciones de compilaci√≥n explicadas
echo "üìã Opciones de compilaci√≥n:"
echo "   ‚Ä¢ --onefile: Un solo ejecutable"
echo "   ‚Ä¢ --console: Mantener ventana de consola"
echo "   ‚Ä¢ --name: Nombre del ejecutable"
echo "   ‚Ä¢ --add-data: Incluir carpetas de datos"
echo

# Compilar con PyInstaller
echo "‚öôÔ∏è  Compilando con PyInstaller..."
pyinstaller \
    --onefile \
    --console \
    --name ProcesadorPrevired \
    --distpath . \
    --workpath build \
    --specpath build \
    procesar_archivos_windows.py

# Verificar el resultado
if [ $? -eq 0 ] && [ -f "ProcesadorPrevired" ]; then
    echo
    echo "========================================="
    echo "   ‚úÖ COMPILACI√ìN EXITOSA"
    echo "========================================="
    echo
    
    # Informaci√≥n del ejecutable
    echo "üìÑ Ejecutable creado: ProcesadorPrevired"
    
    SIZE=$(stat -c%s "ProcesadorPrevired" 2>/dev/null || echo "Desconocido")
    echo "üìä Tama√±o: $SIZE bytes (~$(($SIZE/1024/1024)) MB)"
    
    # Verificar permisos
    chmod +x ProcesadorPrevired
    echo "‚úÖ Permisos de ejecuci√≥n configurados"
    
    # Verificar tipo de archivo
    echo "üîç Tipo de archivo:"
    file ProcesadorPrevired
    
    echo
    echo "üìã PRUEBA LOCAL:"
    echo "1. Aseg√∫rese de tener archivos en archivos105espacios/"
    echo "2. Verifique jornadas/jornadasTrabajadores.csv"
    echo "3. Ejecute: ./ProcesadorPrevired"
    echo
    echo "‚ö†Ô∏è  NOTA: Este es un ejecutable Linux"
    echo "   Para Windows, use GitHub Actions o compile en Windows"
    
    # Opci√≥n de prueba inmediata
    echo
    read -p "¬øDesea probar el ejecutable ahora? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "üöÄ Ejecutando prueba..."
        ./ProcesadorPrevired
    fi
    
else
    echo
    echo "========================================="
    echo "   ‚ùå ERROR EN LA COMPILACI√ìN"
    echo "========================================="
    echo
    echo "Posibles causas:"
    echo "1. Errores en el c√≥digo Python"
    echo "2. Dependencias faltantes"
    echo "3. Problemas con PyInstaller"
    echo
    echo "üí° Soluciones:"
    echo "1. Probar el script: python3 procesar_archivos_windows.py"
    echo "2. Revisar los logs de error arriba"
    echo "3. Reinstalar PyInstaller: pip3 install --upgrade pyinstaller"
    exit 1
fi

# Limpiar archivos temporales
echo
echo "üßπ Limpiando archivos temporales..."
rm -rf build/

echo "‚úÖ Limpieza completada"
echo
